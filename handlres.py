import asyncio
import re
import os
import vk_api
from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.database import *
import app.keyboards as kb
from app.state import *



router = Router()






#–ö–û–ú–ê–ù–î–ê –°–¢–ê–†–¢
users_count = 0
@router.message(CommandStart())
async def cmdStart(message: Message):
    global users_count
    users_count+=1
    start_msg = await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:</b>', reply_markup=kb.start, parse_mode='html')
    await message.delete()






@router.message(Command("status", prefix="!/"))
async def cmdStatus(message: Message):
    global users_count
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ–∫—É—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await message.answer(f"<u>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</u>: <code>{users_count}</code>", reply_markup=kb.autoDelMsg, parse_mode='html')
    await message.delete()





#–ü–†–û–§–ò–õ–¨
@router.callback_query(F.data == 'profile')
async def sendProfile(callback: CallbackQuery):
    username = callback.from_user.username
    user_id = callback.from_user.id
    vipStatus = "–ù–µ—Ç"
    await callback.message.edit_text(f"<b>üë§–í–∞—à –Ω–∏–∫-–Ω–µ–π–º: <u>{username}</u>"
                                     f"\nü§ñ –í–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π ID: <u>{user_id}</u>"
                                     f"\nüíé VIP –°—Ç–∞—Ç—É—Å: <u>{vipStatus}</u></b>",
                                     reply_markup=kb.profile, parse_mode='html')





#–ê–ö–ö–ê–£–ù–¢–´
@router.callback_query(F.data == 'accounts')
async def sendAccounts(callback: CallbackQuery):
    global PustAcc
    user_id = callback.from_user.id
    token = await get_token_from_database(user_id)
    if token:
        authroz = vk_api.VkApi(token=token)
        vk = authroz.get_api()
        user_info = vk.users.get(fields='first_name,last_name')[0]
        user_first_n = user_info['first_name']
        user_last_n = user_info['last_name']
        await callback.message.edit_text(f"üë§ <b>{user_first_n} {user_last_n}</b>", reply_markup=kb.accounts,
                                         parse_mode='html')
    else:
        await callback.message.edit_text("<b>–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç:</b>", reply_markup=kb.accounts, parse_mode='html')


SendToken = None

#–î–û–ë–ê–í–ò–¢–¨ –ê–ö–ö–ê–£–ù–¢
@router.callback_query(F.data == 'addAcc')
async def sendGetAccounts(callback: CallbackQuery, state: FSMContext):
    global SendToken
    await state.set_state(Auth.token)
    SendToken = await callback.message.edit_text("<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É —Å —Ç–æ–∫–µ–Ω–æ–º: \n\n"
                                                 "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:"
                                                 "\n1) –ó–∞–π–¥–∏—Ç–µ <a href=vkhost.github.io>–°–Æ–î–ê</a>"
                                                 "\n2) –í—ã–±–∏—Ä–∏—Ç–µ —Ç–∏–ø <i>VK Admin</i>"
                                                 "\n3) –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <i>–†–ê–ó–†–ï–®–ò–¢–¨</i>"
                                                 "\n4) –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É —Å–∞–π—Ç–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –±—ã–ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ —Å–∫–∏–Ω—å—Ç–µ –µ–µ –±–æ—Ç—É!\n<u>–ì–û–¢–û–í–û</u></b>",
                                                 reply_markup=kb.addAccount, parse_mode='html',
                                                 disable_web_page_preview=True)


@router.message(Auth.token)
async def getTokenAndAuth(message: Message, state: FSMContext):
    token_text = message.text
    global SendToken
    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    token_match = re.search(r'token=(.*?)&expires_in', token_text)
    if token_match:
        token = token_match.group(1)
        await state.update_data(token=token)
        await state.clear()
        user_id = message.from_user.id

        existing_token = await get_token_from_database(user_id)
        if existing_token:
            await message.delete()
            SendToken = await message.answer(
                "–•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤? –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ VIP —É—Ä–æ–≤–µ–Ω—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∞–∫–∫–∞—É–Ω—Ç–∞–º ‚ùï",
                parse_mode='html')
            await asyncio.sleep(5)
            await SendToken.delete()
            return

        insert_into_db = await insert_token_into_database(user_id, token)
        if insert_into_db:
            try:
                vk_auth = vk_api.VkApi(token=token)
                vk = vk_auth.get_api()
                user_info = vk.users.get()
                first_name = user_info[0]['first_name']
                last_name = user_info[0]['last_name']
                await SendToken.edit_text(f"üë§ <b>{first_name} {last_name}</b>", reply_markup=kb.accounts,
                                          parse_mode='html')
                await message.delete()
                SuccessMsg = await message.answer(
                    f'–ê–∫–∫–∞—É–Ω—Ç <b>{first_name}</b>  <b>{last_name}</b> —É—Å–ø—à–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω ‚úîÔ∏è', parse_mode='html')
                await asyncio.sleep(3)
                await SuccessMsg.delete()
            except vk_api.AuthError as e:
                await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–¥ –¥–∞–Ω–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É!')
        else:
            await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!')
    else:
        await message.answer("–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

#–£–î–ê–õ–ò–¢–¨ –ê–ö–ö–ê–£–ù–¢
@router.callback_query(F.data == 'delAcc')
async def delAcc(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    token = await get_token_from_database(user_id)
    if token:
        authroz = vk_api.VkApi(token=token)
        vk = authroz.get_api()
        user_info = vk.users.get(fields='first_name,last_name')[0]
        user_first_n = user_info['first_name']
        user_last_n = user_info['last_name']
        await state.set_state(Auth.deleteAcc)
        await delete_token_from_database(user_id)
        await callback.message.edit_text("<b>–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –ø—É—Å—Ç:</b>", reply_markup=kb.accounts, parse_mode='html')
        await callback.answer(f"–ê–∫–∫–∞—É–Ω—Ç {user_first_n} {user_last_n} —É–¥–∞–ª–µ–Ω!", show_alert=True)
        await state.clear()
    else:
        await callback.answer("–ê–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)



@router.callback_query(F.data == 'task')
async  def getTask(callback: CallbackQuery):
    await callback.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:</b>', reply_markup=kb.chooseTask, parse_mode='html')





# –†–ê–°–°–´–õ–ö–ê
@router.callback_query(F.data == 'rassilka')
async def sendRassilka(callback: CallbackQuery):
    await callback.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:</b>', reply_markup=kb.chooseRassilka, parse_mode='html')


# –†–ê–°–°–´–õ–ö–ê –ü–û –ß–ê–¢–ê–ú
chat_titles = []  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω –±–µ—Å–µ–¥


@router.callback_query(F.data == 'RassInChats')
async def sendMessageForVk(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Auth.SendMsg)
    user_id = callback.from_user.id
    token = await get_token_from_database(user_id)

    if token:
        authroz = vk_api.VkApi(token=token)
        vk = authroz.get_api()
        user_info = vk.users.get(fields='first_name,last_name')[0]
        user_first_n = user_info['first_name']
        user_last_n = user_info['last_name']

        # try:
        #     conversations = vk.messages.getConversations(extended=True)
        #
        #     global chat_titles
        #
        #     # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –∏–º–µ–Ω
        #     chat_titles.clear()
        #
        #     # –í—ã–≤–æ–¥ –∏–º–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–µ—Å–µ–¥ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω –≤ —Å–ø–∏—Å–æ–∫
        #     for conv in conversations['items']:
        #         conv_data = conv['conversation']
        #         if conv_data['peer']['type'] == 'chat':
        #             chat_info = conv_data['chat_settings']
        #             if 'kicked' in chat_info and chat_info['kicked']:
        #                 continue
        #             if 'left' in chat_info and chat_info['left']:
        #                 continue
        #             chat_title = chat_info['title']
        #             chat_titles.append(chat_title)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –±–µ—Å–µ–¥—ã –≤ —Å–ø–∏—Å–æ–∫
        #
        #     keyboard = InlineKeyboardBuilder()
        #     for chat in chat_titles:
        #         keyboard.add(InlineKeyboardButton(text=chat, callback_data='erf'))
        #     keyboard.add(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–ê–ó–ê–î", callback_data="backToRass"))
        #     keyboard_markup = keyboard.adjust(1).as_markup()

        await callback.message.edit_text(
            f'<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ –≤—Å–µ –±–µ—Å–µ–¥—ã –í–ö, –∏—Å–ø–æ–ª—å–∑—É—è –∞–∫–∫–∞—É–Ω—Ç:üë§ <u>{user_first_n} {user_last_n}</u></b>',
            reply_markup=kb.rassilkaInChats, parse_mode='html')

        # except Exception :
        #         pass
    else:
        await callback.message.edit_text(
            '<b>–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π <u>–†–ê–°–°–´–õ–ö–ê –ü–û –ß–ê–¢–ê–ú</u>, –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ <code>–ü—Ä–æ—Ñ–∏–ª—å</code>-><code>–ê–∫–∫–∞—É–Ω—Ç—ã</code></b>',
            reply_markup=kb.chooseTask, parse_mode='html')


@router.message(Auth.SendMsg)
async def messageSendIntVk(message: Message, state: FSMContext):
    text_for_send_into_vk = message.text
    full_message = f"{text_for_send_into_vk}\n\n–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç - t.me/yankee_agency_bot"
    await message.delete()
    await state.update_data(SendMsg=full_message)
    user_id = message.from_user.id
    token = await get_token_from_database(user_id)
    if token:
        vk_auth = vk_api.VkApi(token=token)
        vk = vk_auth.get_api()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π —Ç–æ—á–µ–∫
        sending_message = await message.answer('<b>–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω.</b>', parse_mode='html')
        for i in range(3):
            await sending_message.edit_text(f'<b>–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω</b>{"." * (i + 1)}\u2063', parse_mode='html')
            await asyncio.sleep(1)
            await state.clear()

        chats = vk.messages.getConversations(filter='chats')['items']
        for chat in chats:
            chat_id = chat['conversation']['peer']['id']
            try:
                await asyncio.sleep(2)
                vk.messages.send(peer_id=chat_id, message=full_message, random_id=0)
            except:
                pass
        await sending_message.edit_text(f'–°–æ–æ–±—â–µ–Ω–∏–µ: <i><u>{text_for_send_into_vk}</u></i>\n–£—Å–ø—à–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–æ –≤—Å–µ –±–µ—Å–µ–¥—ã! üöÄ',
            reply_markup=kb.autoDelMsg, parse_mode='html')


# –†–ê–°–°–´–õ–ö–ê –í –õ–°
@router.callback_query(F.data == 'RassInLs')
async def sendRassInLs(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    token = await get_token_from_database(user_id)
    if token:
        authroz = vk_api.VkApi(token=token)
        vk = authroz.get_api()
        await state.set_state(Rass.linksForRas)
        msg = await callback.message.edit_text(
            '<b>–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–∫–∫–∞–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –í–ö <u>10 —Å—Å—ã–ª–æ–∫ –º–∞–∫—Å. üìå</u>\n\n'
            '‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∏ –≤–µ–¥—É—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã. –ó–∞–∫—Ä—ã—Ç—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –ø–æ–ª—É—á–∞—Ç —Ä–∞—Å—Å—ã–ª–∫—É </b>',
            reply_markup=kb.rassilkaInLs, parse_mode='html')
        await state.update_data(text_message_id=msg.message_id)
    else:
        await callback.message.edit_text(
            '<b>–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π <u>–†–ê–°–°–´–õ–ö–ê –í –õ–°</u>, –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ <code>–ü—Ä–æ—Ñ–∏–ª—å</code>-><code>–ê–∫–∫–∞—É–Ω—Ç—ã</code></b>',
            reply_markup=kb.chooseTask, parse_mode='html')


@router.message(Rass.linksForRas)
async def gotLinksForRass(message: Message, state: FSMContext):
    links_text = message.text
    user_id = message.from_user.id
    if links_text.count('\n') + 1 > 10:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫
        data = await state.get_data()
        text_message_id = data.get("text_message_id")
        await message.bot.edit_message_text(chat_id=message.chat.id, message_id=text_message_id,
                                            text="<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ <u>VIP –°—Ç–∞—Ç—É—Å</u> –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–æ–ª–µ–µ 10 —Å—Å—ã–ª–æ–∫!</b>",
                                            parse_mode='html', reply_markup=kb.rassilkaInLs)
        await message.delete()
        return

    await state.update_data(linksForRas=message.text)
    await message.delete()

    data = await state.get_data()
    text_message_id = data.get("text_message_id")
    await message.bot.edit_message_text(chat_id=message.chat.id, message_id=text_message_id,
                                        text="<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</b> ", parse_mode='html',
                                        reply_markup=kb.rassilkaInLs)
    await state.set_state(Rass.msgForRas)


@router.message(Rass.msgForRas)
async def send_msg_in_ls(message: Message, state: FSMContext):
    await state.update_data(msgForRas=message.text)
    await message.delete()
    user_id = message.from_user.id
    token = await get_token_from_database(user_id)
    data = await state.get_data()
    text_message_id = data.get("text_message_id")
    accsForRass = data["linksForRas"]
    msg = data["msgForRas"]
    full_message = f"{msg}\n\n–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –±–æ—Ç - t.me/yankee_agency_bot"

    if token:
        authroz = vk_api.VkApi(token=token)
        vk = authroz.get_api()
        user_info = vk.users.get(fields='first_name,last_name')[0]
        user_first_n = user_info['first_name']
        user_last_n = user_info['last_name']
        ssilki = re.findall(r'https://vk.com/([^/\s]+)', accsForRass)
        if len(accsForRass.split('\n')) == 1 and 'https://' in accsForRass:
            await state.clear()
            await message.bot.edit_message_text(chat_id=message.chat.id, message_id=text_message_id,
                                                text="<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! üéâ</b>",
                                                parse_mode='html', reply_markup=kb.chooseTask)
            for username in ssilki:
                try:
                    user_info = vk.users.get(user_ids=username)
                    user_id = user_info[0]['id']
                    vk.messages.send(user_id=user_id, message=full_message, random_id=0)
                    await asyncio.sleep(1)
                except Exception as e:
                    pass
        else:
            await message.bot.edit_message_text(chat_id=message.chat.id, message_id=text_message_id,
                                                text=f"<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ üì®\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–º –≤ 20 –º–∏–Ω—É—Ç\n–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∞–∫–∫–∞—É–Ω—Ç:üë§ <u>{user_first_n} {user_last_n}</u></b>",
                                                parse_mode='html', reply_markup=kb.continueToTask)
            await state.clear()
            for username in ssilki:
                try:
                    user_info = vk.users.get(user_ids=username)
                    user_id = user_info[0]['id']
                    vk.messages.send(user_id=user_id, message=full_message, random_id=0)
                    await asyncio.sleep(1200)
                except Exception as e:
                    pass
            await message.answer("<b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! üéâ</b>",
                                 parse_mode='html', reply_markup=kb.autoDelMsg)

    else:
        await message.answer("<u>–û–®–ò–ë–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• –û–ë–†–ê–¢–ò–¢–ï–°–¨ –í –ü–û–î–î–ï–†–ñ–ö–£!</u>", parse_mode='html')





# VIP
@router.callback_query(F.data == 'vip')
async def getVip(callback: CallbackQuery):
    await callback.message.edit_text("<b>GOLD VIP üëáüèª"
                                     "\n‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å 3+ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"
                                     "\n‚Ä¢ –ü–∏–∞—Ä –≤ 15+ —á–∞—Ç–∞—Ö"
                                     "\n‚Ä¢ –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞ 30+ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –õ–°"
                                     "\n‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–∞—à–µ–π —Ä–µ–∫–ª–∞–º—ã –≤ –≤–∞—à–µ–º —Ç–µ–∫—Å—Ç–µ"
                                     "\n‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ü–∞—Ä—Å–∏–Ω–≥"
                                     "\n‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø–∏–∞—Ä"
                                     "\n–°—Ç–æ–∏–º–æ—Å—Ç—å - 90‚ÇΩ"
                                     "\n–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞: Cryptobot, –¢–∏–Ω—å–∫–æ—Ñ—Ñ, –°–±–µ—Ä–±–∞–Ω–∫, –°–ë–ü</b>",
                                     reply_markup=kb.vip, parse_mode='html')





#–ú–ê–ì–ê–ó–ò–ù
@router.callback_query(F.data == 'shop')
async def getShop(callback: CallbackQuery):
    await callback.message.edit_text("üë• <b>–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç VK/TELEGRAM - –æ—Ç 50‚ÇΩ"
                                     "\nüí≠ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–∞–∑—É —á–∞—Ç–æ–≤/–±–µ—Å–µ–¥ - –æ—Ç 50‚ÇΩ"
                                     "\nüßë‚Äçüßë‚Äçüßí‚Äçüßí –ù–∞–∫—Ä—É—Ç–∫–∞ Telegram/VK/TikTok/Youtube –∏ –¥—Ä. - –æ—Ç 0,1 –∫–æ–ø"
                                     "\nü§ñ –ê–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ ( –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø—Ä–æ—á–µ–µ –Ω–∞ –Ω–∞—Å ) - –æ—Ç 100‚ÇΩ"
                                     "\n<u>–°–≤—è–∑—å</u> - @nobioyetj</b>", reply_markup=kb.shop, parse_mode='html')





#–ü–ê–†–°–ï–†
@router.callback_query(F.data == 'parser')
async def sendParsChoosePars(callback: CallbackQuery):
    await callback.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∞—Ä—Å–∏–Ω–≥–∞:</b>', reply_markup=kb.chooseParsing, parse_mode='html')





#–ü–ê–†–°–ò–ù–ì –°–û–û–ë–©–ï–°–¢–í–û –í–ö
@router.callback_query(F.data == 'parsSoobVk')
async def sendParsSoobVk(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Pars.vkSoob)
    await callback.message.edit_text('‚öôÔ∏è<b> –ü–ê–†–°–ï–† –í–ö –°–û–û–ë–©–ï–°–¢–í–û ‚öôÔ∏è'
                                     '\n\n–ü–æ–ª—É—á–∞–π—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ —Å –ª–µ–≥–∫–æ—Å—Ç—å—é!</b>\n\n'
                                     '<u>–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç</u>:',
                                     reply_markup=kb.soobPars, parse_mode='html')


@router.message(Pars.vkSoob)
async def getVkSoobData(message: Message, state: FSMContext):
    from_user_soob_link = message.text
    if from_user_soob_link.startswith("https://vk.com/"):
        soobLink = from_user_soob_link.split("https://vk.com/")[1]
        user_id = message.from_user.id
        token = await get_token_from_database(user_id)
        if token:
            authroz = vk_api.VkApi(token=token)
            vk = authroz.get_api()
            group_id = soobLink
            try:
                get_member = vk.groups.getMembers(group_id=group_id, count=10, fields='first_name,last_name')

                member_list = []

                for member in get_member['items']:
                    user_first_n = member['first_name']
                    user_last_n = member['last_name']
                    user_id = member['id']

                    member_list.append(f"https://vk.com/id{user_id}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                await message.answer('\n'.join(member_list), reply_markup=kb.autoDelMsg, disable_web_page_preview=True)
                await message.delete()
                await state.clear()
            except Exception:
                await message.answer("<b>‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≤–∞–º–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ, —Å–∫—Ä—ã–ª–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞—Ö. \n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–µ —Å–∫—Ä—ã—Ç—ã</b>", reply_markup=kb.autoDelMsg, parse_mode='html')
                await state.clear()
                await message.delete()

        else:
            await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Å—Å—ã–ª–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ üö´\n ")




#–ü–ê–†–°–ò–ù–ì –ë–ï–°–ï–î–´ –í–ö
@router.callback_query(F.data == 'parsBesedVk')
async def sendParsBesedVk(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Pars.vkBesed)
    await callback.message.edit_text('<b>‚öôÔ∏è –ü–ê–†–°–ï–† –í–ö –ë–ï–°–ï–î ‚öôÔ∏è'
                                     '\n\n–ü–æ–ª—É—á–∞–π—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ª—é–±–æ–π –±–µ—Å–µ–¥—ã –í–ö–æ–Ω—Ç–∞–∫—Ç–µ —Å –ª–µ–≥–∫–æ—Å—Ç—å—é!</b>\n\n'
                                     '<u>–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–µ—Å–µ–¥—É –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç</u>:',
                                     reply_markup=kb.besedPars, parse_mode='html')


@router.message(Pars.vkBesed)
async def getParsBesedVk(message: Message):
    from_user_besed_link = message.text
    await message.delete()

    if from_user_besed_link.startswith("https://vk.com/im?sel=c"):
        user_id = message.from_user.id
        token = await get_token_from_database(user_id)
        if token:
            authroz = vk_api.VkApi(token=token)
            vk = authroz.get_api()

            besedaId = re.search(r'sel=c(\d+)', from_user_besed_link).group(1)
            participants = vk.messages.getChatUsers(chat_id=besedaId, fields='nickname')

            participants = participants[:10]
            account_links = []
            for participant in participants:
                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞
                account_link = 'https://vk.com/id{}'.format(participant['id'])
                account_links.append(account_link)
            await message.answer("\n".join(account_links), reply_markup=kb.autoDelMsg,  disable_web_page_preview=True)
        else:
            await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞")
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —Å—Å—ã–ª–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ üö´\n")





#–ò–ù–°–¢–†–£–ö–¶–ò–Ø
@router.callback_query(F.data == 'instruction')
async def sendInstruction(callback: CallbackQuery):
    await callback.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:</b>', reply_markup=kb.instruction, parse_mode='html', disable_web_page_preview=True)




#–ü–û–õ–£–ß–ò–¢–¨ –¢–û–ö–ï–ù
@router.callback_query(F.data == 'getToken')
async def getToken (callback: CallbackQuery):
    await callback.message.edit_text('<b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω</b> '
                                      '\n1) –ó–∞–π–¥–∏—Ç–µ <a href=vkhost.github.io>–°–Æ–î–ê</a> '
                                      '\n2) –í—ã–±–∏—Ä–∏—Ç–µ —Ç–∏–ø <i>VK Admin</i> '
                                      '\n3) –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <i>–†–ê–ó–†–ï–®–ò–¢–¨</i> '
                                      '\n4) –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É —Å–∞–π—Ç–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –±—ã–ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –∏ —Å–∫–∏–Ω—å—Ç–µ –µ–µ –±–æ—Ç—É! '
                                      '\n<b>–ì–û–¢–û–í–û</b>',
                                      reply_markup=kb.getToken, parse_mode='html', disable_web_page_preview=True)









#–û –ù–ê–°
@router.callback_query(F.data == 'aboutUs')
async def  sendAboutUs(callback: CallbackQuery):
    await callback.message.edit_text("üëã <u>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
                                     "\n\nüöÄ</u> –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É - <a href='https://t.me/yankeeagency'>Yankee Agency</a>, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π!"
                                     "\n\nüõ†Ô∏è –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã? –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ @nobioyetj –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. üí¨",
        reply_markup=kb.backToStart, parse_mode='html', disable_web_page_preview=True)




@router.callback_query(F.data == 'backToStart')
async def backToStart(callback: CallbackQuery):
    await callback.message.edit_text('<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:</b>', reply_markup=kb.start, parse_mode='html')


@router.callback_query(F.data == 'backToPrfl')
async def backToPrfl(callback: CallbackQuery):
    await sendProfile(callback)


@router.callback_query(F.data == 'backToInstruction')
async def backToInstruction(callback: CallbackQuery):
    await sendInstruction(callback)


@router.callback_query(F.data == 'backToAcc')
async def backToAcc(callback: CallbackQuery, state: FSMContext):
    await sendAccounts(callback)
    await state.clear()


@router.callback_query(F.data == 'backToTask')
async def backToTask(callback: CallbackQuery):
    await getTask(callback)


@router.callback_query(F.data == 'backToRass')
async def backToRass(callback: CallbackQuery, state: FSMContext):
    await sendRassilka(callback)
    await state.clear()

@router.callback_query(F.data == 'backParsChoosePars')
async def backToParsChoose(callback: CallbackQuery, state: FSMContext):
    await sendParsChoosePars(callback)
    await state.clear()



@router.callback_query(F.data == 'deleteMe')
async def deleteKeyboard(callback: CallbackQuery):
    await callback.message.delete()



@router.callback_query(F.data == 'InDev')
async def In_Dev(callback: CallbackQuery):
    await callback.answer('–ö–Ω–æ–ø–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ !', show_alert=True)


